name: Duplicate Issue Checker

on:
    issues:
        types: [opened, reopened, edited]

permissions:
    issues: write
    contents: read

jobs:
    check-duplicate:
        name: Check for Duplicate Issues
        runs-on: ubuntu-latest
        steps:
            - name: Check for duplicate issues with logging
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      function similarity(s1, s2) {
                        const longer = s1.length > s2.length ? s1 : s2;
                        const shorter = s1.length > s2.length ? s2 : s1;
                        const longerLength = longer.length;
                        if (longerLength === 0) return 1.0;
                        return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);
                      }

                      function editDistance(s1, s2) {
                        s1 = s1.toLowerCase();
                        s2 = s2.toLowerCase();

                        const costs = [];
                        for (let i = 0; i <= s1.length; i++) {
                          let lastValue = i;
                          for (let j = 0; j <= s2.length; j++) {
                            if (i === 0) {
                              costs[j] = j;
                            } else if (j > 0) {
                              let newValue = costs[j - 1];
                              if (s1.charAt(i - 1) !== s2.charAt(j - 1)) {
                                newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
                              }
                              costs[j - 1] = lastValue;
                              lastValue = newValue;
                            }
                          }
                          if (i > 0) costs[s2.length] = lastValue;
                        }
                        return costs[s2.length];
                      }

                      const issueTitle = context.payload.issue.title.toLowerCase();
                      const issueNumber = context.payload.issue.number;
                      const repoOwner = context.repo.owner;
                      const repoName = context.repo.repo;

                      console.log(`Checking for duplicates of issue #${issueNumber}: "${issueTitle}"`);

                      const { data: issues } = await github.rest.issues.listForRepo({
                        owner: repoOwner,
                        repo: repoName,
                        state: 'open',
                        per_page: 100
                      });

                      const possibleDuplicates = issues.filter(issue => {
                        if (issue.number === issueNumber) return false;

                        const title = issue.title.toLowerCase();
                        const score = similarity(issueTitle, title);

                        console.log(`Compared with #${issue.number}: "${title}", similarity: ${score}`);

                        return score >= 0.6;
                      });

                      if (possibleDuplicates.length > 0) {
                        const commentBody = [
                          "🔍 **Possible duplicate issues found:**",
                          "",
                          ...possibleDuplicates.slice(0, 5).map(issue =>
                            `- [#${issue.number}](${issue.html_url}) - ${issue.title}`
                          ),
                          "",
                          "Please review the above issues to see if your problem has already been reported. If so, consider adding more info to the existing thread instead of creating a new one."
                        ].join('\n');

                        console.log("Posting comment with duplicates...");

                        await github.rest.issues.createComment({
                          owner: repoOwner,
                          repo: repoName,
                          issue_number: issueNumber,
                          body: commentBody
                        });
                      } else {
                        console.log("✅ No duplicates found.");
                      }
