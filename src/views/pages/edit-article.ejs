<% layout("layouts/boilerplate") %>

<style>
:root {
    --primary: #9c27b0;
    --primary-hover: #7b1fa2;
    --primary-light: #e1bee7;
    --card-bg: rgba(255, 255, 255, 0.08);
    --input-bg: rgba(255, 255, 255, 0.12);
    --text: #f5f5f5;
    --subtext: #bbb;
    --error: #e74c3c;
    --success: #27ae60;
    --warning: #f39c12;
    --border: rgba(255, 255, 255, 0.2);
    --shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

/* Global Reset */
* {
    box-sizing: border-box;
}

/* Wrapper */
.form-wrapper {
    max-width: 900px;
    margin: 40px auto;
    padding: 40px;
    background: var(--card-bg);
    border-radius: 20px;
    box-shadow: var(--shadow);
    backdrop-filter: blur(10px);
    border: 1px solid var(--border);
}

/* Title */
.form-title {
    font-size: 2.5rem;
    font-weight: 700;
    color: #fff;
    margin-bottom: 40px;
    display: flex;
    align-items: center;
    gap: 15px;
    border-left: 6px solid var(--warning);
    padding-left: 20px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

/* Section Headings */
.section-heading {
    font-size: 1.4rem;
    font-weight: 600;
    color: var(--primary-light);
    margin-bottom: 15px;
    border-bottom: 2px solid var(--primary);
    padding-bottom: 8px;
    display: flex;
    align-items: center;
    gap: 10px;
}

/* Labels & Inputs */
.form-group {
    margin-bottom: 30px;
}

.form-group label {
    font-weight: 600;
    color: var(--text);
    display: block;
    margin-bottom: 10px;
    font-size: 1.1rem;
    display: flex;
    align-items: center;
    gap: 8px;
}

.form-group input {
    width: 100%;
    padding: 15px 18px;
    border: 2px solid transparent;
    border-radius: 12px;
    background: var(--input-bg);
    color: #fff;
    font-size: 1rem;
    outline: none;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
}

.form-group input:focus {
    border-color: var(--primary);
    background: rgba(255, 255, 255, 0.18);
    box-shadow: 0 0 0 3px rgba(156, 39, 176, 0.2);
    transform: translateY(-1px);
}

.form-group input::placeholder {
    color: var(--subtext);
    opacity: 0.8;
}

/* Section Block */
.section-wrapper {
    margin-bottom: 35px;
    padding: 25px;
    background: rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    border-left: 5px solid var(--primary);
    border: 1px solid var(--border);
    backdrop-filter: blur(5px);
    transition: all 0.3s ease;
}

.section-wrapper:hover {
    background: rgba(255, 255, 255, 0.12);
    transform: translateY(-2px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 18px;
}

.section-header h3 {
    font-size: 1.2rem;
    color: var(--primary-light);
    margin: 0;
    font-weight: 600;
}

.section-header .remove-section {
    background: var(--error);
    color: #fff;
    border: none;
    padding: 8px 16px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 5px;
}

.section-header .remove-section:hover {
    background: #c0392b;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(231, 76, 60, 0.3);
}

/* Quill Editors */
.ql-toolbar.ql-snow {
    background: rgba(255, 255, 255, 0.12);
    border: 2px solid var(--border);
    border-radius: 12px 12px 0 0;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    padding: 12px;
    backdrop-filter: blur(5px);
}

.ql-toolbar button {
    border-radius: 6px !important;
    margin: 2px !important;
    transition: all 0.2s ease !important;
}

.ql-toolbar button:hover {
    background: rgba(255, 255, 255, 0.2) !important;
    transform: translateY(-1px);
}

.ql-toolbar button.ql-bold,
.ql-toolbar button.ql-italic {
    background: rgba(255, 255, 255, 0.9) !important;
    border-radius: 6px;
    margin: 2px;
}

.ql-toolbar button.ql-bold svg,
.ql-toolbar button.ql-italic svg {
    filter: invert(0) !important;
}

.ql-container.ql-snow {
    border: 2px solid var(--border);
    border-top: none;
    border-radius: 0 0 12px 12px;
    background: var(--input-bg);
    color: #fff;
    min-height: 220px;
    backdrop-filter: blur(5px);
}

.ql-editor {
    min-height: 180px;
    font-size: 1.05rem;
    color: #fff;
    line-height: 1.6;
    padding: 20px;
}

.ql-editor::before {
    color: var(--subtext) !important;
    opacity: 0.8;
}

.ql-toolbar svg {
    filter: brightness(2.2);
}

.ql-toolbar .ql-picker {
    color: #fff !important;
}

.ql-toolbar .ql-picker-options {
    background: rgba(51, 51, 51, 0.95);
    border: 1px solid var(--border);
    border-radius: 8px;
    backdrop-filter: blur(10px);
}

.ql-toolbar .ql-picker-item {
    color: #fff !important;
    padding: 8px 12px;
    transition: background 0.2s ease;
}

.ql-toolbar .ql-picker-item:hover {
    background: rgba(255, 255, 255, 0.1);
}

/* Add Section Button */
.add-section {
    margin: 30px 0 40px;
    background: var(--input-bg);
    color: var(--text);
    padding: 20px 24px;
    border-radius: 12px;
    cursor: pointer;
    font-size: 1.1rem;
    font-weight: 500;
    border: 2px dashed var(--border);
    transition: all 0.3s ease;
    text-align: center;
    backdrop-filter: blur(5px);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

.add-section:hover {
    background: rgba(255, 255, 255, 0.18);
    border-color: var(--primary);
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(156, 39, 176, 0.2);
}

/* Buttons */
.btn {
    padding: 16px 32px;
    border: none;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    text-decoration: none;
}

.btn-primary {
    background: linear-gradient(135deg, var(--primary), var(--primary-hover));
    color: white;
    box-shadow: 0 6px 20px rgba(156, 39, 176, 0.4);
}

.btn-primary:hover {
    background: linear-gradient(135deg, var(--primary-hover), var(--primary));
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(156, 39, 176, 0.5);
}

.btn-secondary {
    background: linear-gradient(135deg, #6c757d, #5a6268);
    color: #fff;
    box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
}

.btn-secondary:hover {
    background: linear-gradient(135deg, #5a6268, #495057);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(108, 117, 125, 0.4);
}

.btn-danger {
    background: linear-gradient(135deg, var(--error), #c0392b);
    color: #fff;
    box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);
}

.btn-danger:hover {
    background: linear-gradient(135deg, #c0392b, #a93226);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(231, 76, 60, 0.4);
}

/* Form Actions */
.form-actions {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 50px;
    flex-wrap: wrap;
}

.delete-section {
    margin-top: 30px;
    padding: 25px;
    background: rgba(231, 76, 60, 0.1);
    border-radius: 16px;
    border: 2px solid rgba(231, 76, 60, 0.3);
    text-align: center;
}

.delete-section h3 {
    color: var(--error);
    margin-bottom: 15px;
    font-size: 1.3rem;
}

/* Form validation styles */
.form-group.error input {
    border-color: var(--error);
    box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.2);
}

.error-message {
    color: var(--error);
    font-size: 0.9rem;
    margin-top: 5px;
    display: flex;
    align-items: center;
    gap: 5px;
}

/* Success state */
.form-group.success input {
    border-color: var(--success);
    box-shadow: 0 0 0 3px rgba(39, 174, 96, 0.2);
}

/* Responsive */
@media (max-width: 768px) {
    .form-wrapper {
        margin: 20px 15px;
        padding: 25px 20px;
    }

    .form-title {
        font-size: 2rem;
        margin-bottom: 30px;
    }

    .section-wrapper {
        padding: 20px 15px;
    }

    .section-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }

    .form-actions {
        flex-direction: column;
        align-items: stretch;
    }

    .btn {
        width: 100%;
        justify-content: center;
    }
}

@media (max-width: 480px) {
    .form-wrapper {
        margin: 15px 10px;
        padding: 20px 15px;
    }

    .form-title {
        font-size: 1.8rem;
        flex-direction: column;
        text-align: center;
        gap: 10px;
        padding-left: 0;
        border-left: none;
        border-bottom: 4px solid var(--warning);
        padding-bottom: 15px;
    }
}
</style>

<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

<div class="form-wrapper">
    <h1 class="form-title">
        <span>‚úèÔ∏è</span>
        <span>Edit Legal Article</span>
    </h1>

    <form action="/api/articles/<%= article._id %>?_method=PUT" method="POST" id="article-form" novalidate>
        <input type="hidden" name="_method" value="PUT">

        <!-- Title -->
        <div class="form-group">
            <label for="title">
                <span>üìÑ</span>
                Article Title
            </label>
            <input
                type="text"
                id="title"
                name="title"
                value="<%= article.title %>"
                placeholder="Enter article title..."
                required
                maxlength="200"
                autocomplete="off"
            >
            <div class="error-message" id="title-error" style="display: none;"></div>
        </div>

        <!-- Tags -->
        <div class="form-group">
            <label for="tags">
                <span>üè∑Ô∏è</span>
                Tags (comma-separated)
            </label>
            <input
                type="text"
                id="tags"
                name="tags"
                value="<%= article.tags.join(', ') %>"
                placeholder="e.g., constitutional law, civil rights, legal precedent..."
                maxlength="500"
            >
            <div class="error-message" id="tags-error" style="display: none;"></div>
        </div>

        <!-- Introduction -->
        <div class="form-group">
            <h3 class="section-heading">
                <span>üìå</span>
                Introduction
            </h3>
            <div id="introductionEditor"></div>
            <textarea id="introduction" name="introduction" hidden></textarea>
            <div class="error-message" id="introduction-error" style="display: none;"></div>
        </div>

        <!-- Sections -->
        <div id="sections"></div>
        <div class="add-section" id="addSectionBtn">
            <span>‚ûï</span>
            <span>Add New Section</span>
        </div>

        <!-- Conclusion -->
        <div class="form-group">
            <h3 class="section-heading">
                <span>üîé</span>
                Conclusion
            </h3>
            <div id="conclusionEditor"></div>
            <textarea id="conclusion" name="conclusion" hidden></textarea>
            <div class="error-message" id="conclusion-error" style="display: none;"></div>
        </div>

        <!-- Update Button -->
        <div class="form-actions">
            <button type="submit" class="btn btn-primary" id="submitBtn">
                <span>üíæ</span>
                <span>Update</span>
            </button>
            <a href="/articles" class="btn btn-secondary">
                <span>üîô</span>
                <span>Back</span>
            </a>
        </div>
    </form>

    <!-- Delete Section -->
    <div class="delete-section">
        <h3>‚ö†Ô∏è Danger Zone</h3>
        <p style="color: var(--subtext); margin-bottom: 20px;">
            Once you delete this article, there is no going back. Please be certain.
        </p>
        <form action="/api/articles/<%= article._id %>?_method=DELETE" method="POST">
            <button type="submit" class="btn btn-danger"
                onclick="return confirm('Are you sure you want to permanently delete this article? This action cannot be undone.');">
                <span>üóëÔ∏è</span>
                <span>Delete</span>
            </button>
        </form>
    </div>
</div>

<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>
// Enhanced toolbar options
const toolbarOptions = [
    ['bold', 'italic', 'underline', 'strike'],
    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
    [{ 'indent': '-1'}, { 'indent': '+1' }],
    ['link', 'code-block'],
];

// Initialize editors with placeholders
const introductionEditor = new Quill('#introductionEditor', {
    theme: 'snow',
    modules: {
        toolbar: toolbarOptions
    },
    placeholder: 'Edit the introduction to your legal article...'
});

const conclusionEditor = new Quill('#conclusionEditor', {
    theme: 'snow',
    modules: {
        toolbar: toolbarOptions
    },
    placeholder: 'Edit the conclusion and final thoughts...'
});

// Load existing content
introductionEditor.root.innerHTML = `<%- article.introduction %>`;
conclusionEditor.root.innerHTML = `<%- article.conclusion %>`;

let sectionEditors = [];

// Form validation functions
function showError(fieldId, message) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(`${fieldId}-error`);

    if (field) {
        field.closest('.form-group').classList.add('error');
        field.closest('.form-group').classList.remove('success');
    }

    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'flex';
    }
}

function showSuccess(fieldId) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(`${fieldId}-error`);

    if (field) {
        field.closest('.form-group').classList.remove('error');
        field.closest('.form-group').classList.add('success');
    }

    if (errorDiv) {
        errorDiv.style.display = 'none';
    }
}

// Real-time validation
document.getElementById('title').addEventListener('input', function() {
    const value = this.value.trim();
    if (value.length === 0) {
        showError('title', 'Article title is required');
    } else if (value.length < 10) {
        showError('title', 'Title should be at least 10 characters long');
    } else if (value.length > 200) {
        showError('title', 'Title should not exceed 200 characters');
    } else {
        showSuccess('title');
    }
});

// Add section functionality with improved UI
document.getElementById('addSectionBtn').addEventListener('click', () => {
    const index = sectionEditors.length;
    const wrapper = document.createElement('div');
    wrapper.classList.add('section-wrapper');
    wrapper.style.opacity = '0';
    wrapper.style.transform = 'translateY(20px)';

    wrapper.innerHTML = `
        <div class="section-header">
            <h3>üìñ Section ${index + 1}</h3>
            <button type="button" class="remove-section">
                <span>üóëÔ∏è</span>
                <span>Remove</span>
            </button>
        </div>
        <div class="form-group">
            <label for="sectionTitle${index}">
                <span>üìù</span>
                Section Title
            </label>
            <input
                type="text"
                id="sectionTitle${index}"
                name="sectionSubheadings[]"
                placeholder="Enter section title..."
                required
                maxlength="150"
            >
            <div class="error-message" id="sectionTitle${index}-error" style="display: none;"></div>
        </div>
        <div class="form-group">
            <label for="sectionEditor${index}">
                <span>üìÑ</span>
                Section Content
            </label>
            <div id="sectionEditor${index}"></div>
            <textarea name="sectionContents[]" hidden></textarea>
            <div class="error-message" id="sectionEditor${index}-error" style="display: none;"></div>
        </div>
    `;

    document.getElementById('sections').appendChild(wrapper);

    // Animate in
    setTimeout(() => {
        wrapper.style.transition = 'all 0.3s ease';
        wrapper.style.opacity = '1';
        wrapper.style.transform = 'translateY(0)';
    }, 10);

    const quill = new Quill(`#sectionEditor${index}`, {
        theme: 'snow',
        modules: { toolbar: toolbarOptions },
        placeholder: `Write the content for section ${index + 1}...`
    });

    sectionEditors.push({ quill, wrapper, index });

    // Add validation for section title
    document.getElementById(`sectionTitle${index}`).addEventListener('input', function() {
        const value = this.value.trim();
        if (value.length === 0) {
            showError(`sectionTitle${index}`, 'Section title is required');
        } else if (value.length < 5) {
            showError(`sectionTitle${index}`, 'Section title should be at least 5 characters long');
        } else {
            showSuccess(`sectionTitle${index}`);
        }
    });

    // Remove section functionality
    wrapper.querySelector('.remove-section').addEventListener('click', () => {
        wrapper.style.transition = 'all 0.3s ease';
        wrapper.style.opacity = '0';
        wrapper.style.transform = 'translateY(-20px)';

        setTimeout(() => {
            wrapper.remove();
            sectionEditors = sectionEditors.filter(s => s.wrapper !== wrapper);
            updateSectionNumbers();
        }, 300);
    });

    // Smooth scroll to new section
    setTimeout(() => {
        wrapper.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
        });
    }, 100);
});

// Update section numbers after removal
function updateSectionNumbers() {
    sectionEditors.forEach((section, index) => {
        const header = section.wrapper.querySelector('.section-header h3');
        if (header) {
            header.textContent = `üìñ Section ${index + 1}`;
        }
    });
}

// Load existing sections from the server
const existingSections = <%- JSON.stringify(article.sections || []) %>;
existingSections.forEach((section, index) => {
    // Trigger add section
    document.getElementById('addSectionBtn').click();

    // Wait for section to be created, then populate it
    setTimeout(() => {
        const titleInput = document.getElementById(`sectionTitle${index}`);
        if (titleInput && section.subheading) {
            titleInput.value = section.subheading;
        }

        const editor = sectionEditors[index];
        if (editor && section.content) {
            editor.quill.root.innerHTML = section.content;
        }
    }, 100);
});

// Enhanced form submission with validation
document.getElementById('article-form').addEventListener('submit', function(e) {
    e.preventDefault();

    let isValid = true;
    const submitBtn = document.getElementById('submitBtn');

    // Validate title
    const title = document.getElementById('title').value.trim();
    if (!title || title.length < 10) {
        showError('title', 'Please enter a valid title (at least 10 characters)');
        isValid = false;
    }

    // Skip author validation if field doesn't exist or is optional
    const authorField = document.getElementById('author');
    if (authorField) {
        const author = authorField.value.trim();
        if (author.length > 0 && author.length < 2) {
            showError('author', 'Author name should be at least 2 characters long');
            isValid = false;
        }
    }

    // Validate introduction (more lenient)
    const introText = introductionEditor.getText().trim();
    if (!introText || introText.length < 10) {
        showError('introduction', 'Introduction should be at least 10 characters long');
        isValid = false;
    }

    // Validate conclusion (more lenient)
    const conclusionText = conclusionEditor.getText().trim();
    if (!conclusionText || conclusionText.length < 10) {
        showError('conclusion', 'Conclusion should be at least 10 characters long');
        isValid = false;
    }

    // Validate sections (more lenient)
    sectionEditors.forEach(({ quill, wrapper, index }) => {
        const titleInput = wrapper.querySelector('input[type="text"]');
        if (titleInput) {
            const sectionTitle = titleInput.value.trim();
            const sectionText = quill.getText().trim();

            if (sectionTitle.length > 0 && sectionTitle.length < 3) {
                showError(`sectionTitle${index}`, 'Section title should be at least 3 characters long');
                isValid = false;
            }

            if (sectionText.length > 0 && sectionText.length < 10) {
                showError(`sectionEditor${index}`, 'Section content should be at least 10 characters long');
                isValid = false;
            }
        }
    });

    if (!isValid) {
        // Scroll to first error
        const firstError = document.querySelector('.form-group.error');
        if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        return;
    }

    // Show loading state
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span>‚è≥</span><span>Updating...</span>';

    try {
        // Set editor values to hidden textareas
        document.getElementById('introduction').value = introductionEditor.root.innerHTML;
        document.getElementById('conclusion').value = conclusionEditor.root.innerHTML;

        // Update section textareas
        sectionEditors.forEach(({ quill, wrapper, index }) => {
            const textarea = wrapper.querySelector('textarea');
            if (textarea && quill) {
                textarea.value = quill.root.innerHTML;
            }
        });

        // Debug: Log form data
        console.log('Form data being submitted:');
        console.log('Title:', document.getElementById('title').value);
        console.log('Introduction length:', document.getElementById('introduction').value.length);
        console.log('Conclusion length:', document.getElementById('conclusion').value.length);
        console.log('Tags:', document.getElementById('tags').value);
        console.log('Sections count:', sectionEditors.length);

        // Debug section data
        sectionEditors.forEach(({ quill, wrapper, index }) => {
            const titleInput = wrapper.querySelector('input[name="sectionSubheadings[]"]');
            console.log(`Section ${index + 1} title:`, titleInput ? titleInput.value : 'No title input found');
            console.log(`Section ${index + 1} content length:`, quill ? quill.getText().length : 'No quill editor found');
        });

        // Submit the form directly
        document.getElementById('article-form').submit();

    } catch (error) {
        console.error('Error submitting form:', error);
        // Reset button state on error
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<span>üíæ</span><span>Update</span>';
        alert('There was an error updating the article. Please try again.');
    }
});
</script>
